--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Сделайте запрос к таблице payment и с помощью оконных функций добавьте вычисляемые колонки согласно условиям:
--Пронумеруйте все платежи от 1 до N по дате платежа - 1.1
--Пронумеруйте платежи для каждого покупателя, сортировка платежей должна быть по дате платежа --1.2 
--Посчитайте нарастающим итогом сумму всех платежей для каждого покупателя, сортировка должна 
--быть сперва по дате платежа, а затем по размеру платежа от наименьшей к большей 1.3
--Пронумеруйте платежи для каждого покупателя по размеру платежа от наибольшего к
--меньшему так, чтобы платежи с одинаковым значением имели одинаковое значение номера. --1.4
--Можно составить на каждый пункт отдельный SQL-запрос, а можно объединить все колонки в одном запросе.


select amount,
row_number () over (order by payment_date) нумерация --1.1
from payment p
    
select  customer_id, amount, payment_date,
          row_number () over (partition by customer_id order by payment_date) платежи_каждого --1.2
from payment p

select customer_id, payment_id,  payment_date::date ,amount , 
sum(amount) over (partition by customer_id order by payment_date::date, amount asc)  --1.3
from payment


select customer_id, amount,
         dense_rank () over (partition by customer_id order by amount desc) ранги -- 1.4
from payment 



--ЗАДАНИЕ №2
--С помощью оконной функции выведите для каждого покупателя стоимость платежа и стоимость 
--платежа из предыдущей строки со значением по умолчанию 0.0 с сортировкой по дате платежа.


select customer_id, payment_id, payment_date,
  amount  текущий_платеж,
lag(coalesce(amount, 1), 1, 0.0) over (partition by customer_id order by payment_date) предъидущий_платеж
from payment 

--ЗАДАНИЕ №3
--С помощью оконной функции определите, на сколько каждый следующий платеж покупателя больше или меньше текущего.

select customer_id, payment_id, payment_date,
  amount  текущий_платеж,
lead (amount, 1) over (partition by customer_id order by payment_date) - amount
from payment 



--ЗАДАНИЕ №4
--С помощью оконной функции для каждого покупателя выведите данные о его последней оплате аренды.


select customer_id, payment_id, payment_date, amount
from (
	select *, last_value(payment_id) over (partition by customer_id order by payment_date
		rows between unbounded preceding and unbounded following)
	from payment) x 
where payment_id = last_value



--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--С помощью оконной функции выведите для каждого сотрудника сумму продаж за август 2005 года 
--с нарастающим итогом по каждому сотруднику и по каждой дате продажи (без учёта времени) 
--с сортировкой по дате.

select  staff_id, payment_date::date, sum(amount),
 sum(sum(amount)) over (partition  by staff_id order by payment_date::date)
from payment
where date_trunc('month', payment_date)= '01.08.2005'
group by 1, 2



--ЗАДАНИЕ №2
--20 августа 2005 года в магазинах проходила акция: покупатель каждого сотого платежа получал
--дополнительную скидку на следующую аренду. С помощью оконной функции выведите всех покупателей,
--которые в день проведения акции получили скидку

select *
from (
 select  *, row_number () over (order by payment_date)
 from payment
 where payment_date::date = '20.08.2005') as a 
 where row_number % 100 = 0
