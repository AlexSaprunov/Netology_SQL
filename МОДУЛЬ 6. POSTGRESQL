--=============== МОДУЛЬ 6. POSTGRESQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Напишите SQL-запрос, который выводит всю информацию о фильмах 
--со специальным атрибутом "Behind the Scenes".

select film_id , title , special_features  
from 
film f
where special_features && array['Behind the Scenes']



--ЗАДАНИЕ №2
--Напишите еще 2 варианта поиска фильмов с атрибутом "Behind the Scenes",
--используя другие функции или операторы языка SQL для поиска значения в массиве.

select film_id , title , special_features  
from 
film f
where special_features @> array['Behind the Scenes']


select film_id , title , special_features  
from 
film f
where 'Behind the Scenes' = any(special_features) 



--ЗАДАНИЕ №3
--Для каждого покупателя посчитайте сколько он брал в аренду фильмов 
--со специальным атрибутом "Behind the Scenes.

--Обязательное условие для выполнения задания: используйте запрос из задания 1, 
--помещенный в CTE. CTE необходимо использовать для решения задания.

with cte_f as
(
select film_id , title , special_features   as sf
from 
film f
where special_features && array['Behind the Scenes'])
select c.customer_id ,  
count (cte_f.sf)  
from customer c 
join rental r on r.customer_id  = c.customer_id
join inventory i on i.inventory_id = r.inventory_id 
join cte_f on cte_f.film_id = i.film_id 
group by c.customer_id
order  by c.customer_id


--ЗАДАНИЕ №4
--Для каждого покупателя посчитайте сколько он брал в аренду фильмов
-- со специальным атрибутом "Behind the Scenes".

--Обязательное условие для выполнения задания: используйте запрос из задания 1,
--помещенный в подзапрос, который необходимо использовать для решения задания.



select c.customer_id ,  
count (f1.sf)  
from customer c 
join rental r on r.customer_id  = c.customer_id
join inventory i on i.inventory_id = r.inventory_id
join 
(select film_id , title , special_features   as sf
from 
film f
where special_features && array['Behind the Scenes']) f1 
on f1.film_id = i.film_id
group by c.customer_id
order  by c.customer_id



--ЗАДАНИЕ №5
--Создайте материализованное представление с запросом из предыдущего задания
--и напишите запрос для обновления материализованного представления

create materialized view m1 as
select c.customer_id ,  
count (f1.sf)  
from customer c 
join rental r on r.customer_id  = c.customer_id
join inventory i on i.inventory_id = r.inventory_id
join 
(select film_id , title , special_features   as sf
from 
film f
where special_features && array['Behind the Scenes']) f1 
on f1.film_id = i.film_id
group by c.customer_id
order  by c.customer_id


refresh materialized view m1


select * from m1

--ЗАДАНИЕ №6
--С помощью explain analyze проведите анализ стоимости выполнения запросов из предыдущих заданий и ответьте на вопросы:
--1. с каким оператором или функцией языка SQL, используемыми при выполнении домашнего задания: 
--поиск значения в массиве затрачивает меньше ресурсов системы;
--2. какой вариант вычислений затрачивает меньше ресурсов системы: 
--с использованием CTE или с использованием подзапроса.

--Ответы
--1) cte - select из основного запроса  seq Scan on customer c  (cost=0.00..14.99 rows=599 width=4
-- подзапрос - select из основного запроса Seq Scan on customer c  (cost=0.00..14.99 rows=599 width=4)    вывод: идентично
--2) cte - cost=719.27..720.76 
-- подзапрос - cost=719.27..720.76  вывод: одинаково.
